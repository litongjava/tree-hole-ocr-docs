import{_ as c,r as i,o as n,c as d,a as e,b as o,d as s,e as a}from"./app-BuXDt_qw.js";const t={},p=a(`<h1 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手"><span>快速上手</span></a></h1><h2 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构"><span>代码结构</span></a></h2><p>这是一个典型的 Maven 项目结构，其中：</p><ul><li><code>pom.xml</code>: 这是 Maven 的项目对象模型文件，它包含了项目的依赖、插件和其他配置信息。</li><li><code>src</code>: 这是源代码目录，通常包含主代码 (<code>src/main</code>) 和测试代码 (<code>src/test</code>)。</li></ul><p>从 <code>pom.xml</code> 文件的部分内容中，</p><ol><li>项目的 <code>groupId</code> 是 <code>com.luooqi</code>，而 <code>artifactId</code> 是 <code>tool-ocr</code>。这意味着该项目是由 <code>luooqi</code> 开发的一个名为 <code>tool-ocr</code> 的项目。</li><li>项目的版本信息由一个属性 <code>soft.version</code> 定义，其值为 <code>1.2.6</code>。</li><li>项目有几个依赖项，包括但不限于： <ul><li><code>jnativehook</code>：可能与键盘和鼠标挂钩有关，允许应用程序全局监听键盘和鼠标事件。</li><li><code>hutool-all</code>：Hutool 是一个 Java 工具包，包含了一些常用的 Java 功能模块。</li><li><code>imgscalr-lib</code>：这是一个简单的 Java 图片缩放库。</li></ul></li></ol><p>项目的 <code>src</code> 目录结构如下：</p><ol><li><p><strong>资源文件</strong>:</p><ul><li><code>main/deploy/package/macosx/</code> 和 <code>main/deploy/package/windows/</code>：这些似乎是针对不同操作系统的应用程序图标。</li><li><code>main/resources/</code>：包含了各种资源文件，如CSS、字体、图片等。</li></ul></li><li><p><strong>Java 文件</strong>:</p><ul><li><code>com.benjaminwan.ocrlibrary</code>：这个包似乎包含与OCR处理相关的类。</li><li><code>com.luooqi.ocr</code>：这是应用程序的主要包，其中 <code>MainFm.java</code> 可能是主类。</li><li><code>com.luooqi.ocr.controller</code>：包含应用程序的控制器类。</li><li><code>com.luooqi.ocr.local</code>：可能包含本地OCR功能的类。</li><li><code>com.luooqi.ocr.model</code>：包含应用程序的数据模型。</li><li><code>com.luooqi.ocr.snap</code>：似乎与屏幕截图功能有关。</li><li><code>com.luooqi.ocr.utils</code>：包含各种实用程序类。</li></ul></li><li><p><strong>测试文件</strong>:</p><ul><li><code>test/java/com/luooqi/ocr/utils/OcrUtilsTest.java</code>：一个针对 <code>OcrUtils</code> 类的测试。</li></ul></li></ol><h2 id="使用javafx-maven-plugin-打包应用程序" tabindex="-1"><a class="header-anchor" href="#使用javafx-maven-plugin-打包应用程序"><span>使用javafx-maven-plugin 打包应用程序</span></a></h2><h3 id="javafx-maven-plugin简介" tabindex="-1"><a class="header-anchor" href="#javafx-maven-plugin简介"><span>javafx-maven-plugin简介</span></a></h3><p>javafx-maven-plugin 插件。这个插件为 JavaFX 项目提供了便捷的构建和打包工具。</p><h3 id="使用javafx-maven-plugin生成native" tabindex="-1"><a class="header-anchor" href="#使用javafx-maven-plugin生成native"><span>使用javafx-maven-plugin生成native</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>set JAVA_HOME=D:\\dev_program\\java\\jdk1.8.0_121
mvn jfx:native
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用javafx-的-jpackage-工具-打包应用程序" tabindex="-1"><a class="header-anchor" href="#使用javafx-的-jpackage-工具-打包应用程序"><span>使用JavaFX 的 jpackage 工具 打包应用程序</span></a></h2><p>关于如何将其打包为 <code>.exe</code>，步骤大致如下：</p><ol><li>使用Maven构建项目并生成JAR文件(java 8)。</li><li>使用JavaFX的jpackage工具打包JAR文件为EXE文件 (java 14)。</li></ol><p><code>jpackage</code> 是 Java 14 及更高版本中提供的一个实验工具，用于为 Java 应用程序创建本地包。以下是如何使用 <code>jpackage</code> 为 JavaFX 应用程序创建一个 Windows <code>.exe</code> 文件的基本步骤：</p><h3 id="_1-准备工作" tabindex="-1"><a class="header-anchor" href="#_1-准备工作"><span>1. 准备工作</span></a></h3><ul><li>安装Java 8 和 Java 14</li><li>确保您的 JDK 版本是 14 或更高版本，并且已经包含 <code>jpackage</code>。</li><li>安装.NET SDK 6,下载地址https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-6.0.317-windows-x64-installer</li><li>从 https://github.com/wixtoolset/wix3/releases 下载 WiX 3.0 或更高版本，然后将其添加到 PATH。</li></ul><h3 id="安装wix3" tabindex="-1"><a class="header-anchor" href="#安装wix3"><span>安装wix3</span></a></h3><p>WiX Toolset 进行了一些变化，并且它们开始提供一个 .NET Core 工具，这可能是您使用的安装方法。但对于 <code>jpackage</code>，您需要的是传统的 WiX Toolset，它包含 <code>light.exe</code> 和 <code>candle.exe</code>。</p><p>请按照以下步骤操作：</p>`,22),r=e("p",null,[e("strong",null,"访问 WiX Toolset 的 Releases 页面"),o(":")],-1),v={href:"https://github.com/wixtoolset/wix3/releases",target:"_blank",rel:"noopener noreferrer"},u=a("<li><p><strong>下载并安装 WiX Toolset</strong>:</p><ul><li>在 Releases 页面，找到最新的稳定版本。</li><li>下载 <code>.exe</code> 安装程序或 <code>.zip</code> 归档文件。</li><li>如果下载了 <code>.exe</code> 安装程序，直接运行它以安装。如果下载了 <code>.zip</code> 归档文件，解压它到一个适当的目录。</li></ul></li><li><p><strong>将 WiX Toolset 添加到 PATH</strong>:</p><ul><li>找到 WiX Toolset 的安装目录或您解压 <code>.zip</code> 文件的目录。确保这个目录下有 <code>bin</code> 子目录，并且其中包含 <code>light.exe</code> 和 <code>candle.exe</code>。</li><li>将这个 <code>bin</code> 子目录添加到您的系统 <code>PATH</code>。</li></ul></li><li><p><strong>重新运行 jpackage 命令</strong>。</p></li>",3),h=a(`<p>完成这些步骤后，您应该能够使用 <code>jpackage</code> 正确地打包您的应用程序为 <code>.exe</code> 文件。</p><h3 id="_3-创建-javafx-jar" tabindex="-1"><a class="header-anchor" href="#_3-创建-javafx-jar"><span>3. 创建 JavaFX JAR</span></a></h3><p>首先，您需要使用 Maven 构建项目并生成一个可执行的 JAR 文件。在项目根目录中执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>D:<span class="token punctuation">\\</span>dev_program<span class="token punctuation">\\</span>java<span class="token punctuation">\\</span>jdk1.8.0_121
mvn clean package <span class="token parameter variable">-DskipTests</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>确保 JAR 文件包含所有必要的依赖项并且可以独立运行。</p><h3 id="_4-使用-jpackage-创建-exe-文件" tabindex="-1"><a class="header-anchor" href="#_4-使用-jpackage-创建-exe-文件"><span>4. 使用 jpackage 创建 <code>.exe</code> 文件</span></a></h3><p>以下是一个基本的 <code>jpackage</code> 命令示例，用于将 JavaFX JAR 打包为 <code>.exe</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jpackage <span class="token parameter variable">--type</span> exe <span class="token parameter variable">--input</span> target/ --main-jar tool-ocr-1.2.6.jar <span class="token parameter variable">--name</span> tree-hole-ocr --main-class com.luooqi.ocr.OcrApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>--type exe</code>：指定输出类型为 <code>.exe</code>。</li><li><code>--input target/</code>：指定包含 JAR 文件的目录。</li><li><code>--main-jar</code>：指定要打包的主 JAR 文件。</li><li><code>--name</code>：输出的应用程序名称。</li><li><code>--main-class</code>：指定应用程序的主类。</li><li><code>--win-shortcut</code>：为应用程序创建一个 Windows 快捷方式。</li></ul><p>这只是一个基础示例。<code>jpackage</code> 提供了许多其他选项，例如设置应用程序图标、JVM 参数等。您可以查看 <code>jpackage</code> 的官方文档或使用 <code>jpackage --help</code> 命令查看所有可用选项。</p><p>完成上述步骤后，您应该会在当前目录中得到一个 <code>.exe</code> 文件和一个相应的安装程序。</p><p>注意：这个过程可能需要 JavaFX jmods 文件，您可能需要从 JavaFX 官方网站下载它们，并使用 <code>--module-path</code> 和 <code>--add-modules</code> 选项指定它们。</p><p>最后，如果你想要我为你生成这个 <code>.exe</code> 文件，请告诉我，我会为你完成这个步骤。</p>`,14);function g(m,x){const l=i("ExternalLinkIcon");return n(),d("div",null,[p,e("ol",null,[e("li",null,[r,e("ul",null,[e("li",null,[e("a",v,[o("WiX Toolset Releases"),s(l)])])])]),u]),h])}const k=c(t,[["render",g],["__file","1.1.html.vue"]]),f=JSON.parse('{"path":"/en/01/1.1.html","title":"快速上手","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"代码结构","slug":"代码结构","link":"#代码结构","children":[]},{"level":2,"title":"使用javafx-maven-plugin 打包应用程序","slug":"使用javafx-maven-plugin-打包应用程序","link":"#使用javafx-maven-plugin-打包应用程序","children":[{"level":3,"title":"javafx-maven-plugin简介","slug":"javafx-maven-plugin简介","link":"#javafx-maven-plugin简介","children":[]},{"level":3,"title":"使用javafx-maven-plugin生成native","slug":"使用javafx-maven-plugin生成native","link":"#使用javafx-maven-plugin生成native","children":[]}]},{"level":2,"title":"使用JavaFX 的 jpackage 工具 打包应用程序","slug":"使用javafx-的-jpackage-工具-打包应用程序","link":"#使用javafx-的-jpackage-工具-打包应用程序","children":[{"level":3,"title":"1. 准备工作","slug":"_1-准备工作","link":"#_1-准备工作","children":[]},{"level":3,"title":"安装wix3","slug":"安装wix3","link":"#安装wix3","children":[]},{"level":3,"title":"3. 创建 JavaFX JAR","slug":"_3-创建-javafx-jar","link":"#_3-创建-javafx-jar","children":[]},{"level":3,"title":"4. 使用 jpackage 创建 .exe 文件","slug":"_4-使用-jpackage-创建-exe-文件","link":"#_4-使用-jpackage-创建-exe-文件","children":[]}]}],"git":{"updatedTime":1714305147000,"contributors":[{"name":"litongjava","email":"litongjava@qq.com","commits":1}]},"filePathRelative":"en/01/1.1.md"}');export{k as comp,f as data};
