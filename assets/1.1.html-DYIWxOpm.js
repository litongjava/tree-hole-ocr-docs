import{_ as d,r as c,o as i,c as s,a as e,b as a,d as l,e as n}from"./app-ChvyOVZX.js";const t={},r=e("h1",{id:"快速入门",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#快速入门"},[e("span",null,"快速入门")])],-1),p=e("h2",{id:"安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装"},[e("span",null,"安装")])],-1),h={href:"https://github.com/litongjava/tools-ocr/releases/tag/v2.2.9",target:"_blank",rel:"noopener noreferrer"},u=e("p",null,"下载安装即可,没有什么可以讲解的",-1),_=e("h2",{id:"添加服务模型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#添加服务模型"},[e("span",null,"添加服务模型")])],-1),g=e("p",null,"为了减少安装的包的体积,默认内置内置了移动端模型.移动端模型的推理速度较快,但是有些生僻字无法识别,下面介绍如何添加服务端模型解决这一问题",-1),v=e("h3",{id:"下载-paddle-ocr-服务端模型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#下载-paddle-ocr-服务端模型"},[e("span",null,"下载 paddle ocr 服务端模型")])],-1),m=e("p",null,"paddle paddle 模型下载",-1),x={href:"https://github.com/PaddlePaddle/PaddleOCR/blob/main/doc/doc_ch/models_list.md#1.1",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"下面直接给成服务端模型下载地址",-1),b={href:"https://paddleocr.bj.bcebos.com/PP-OCRv4/chinese/ch_PP-OCRv4_det_server_infer.tar",target:"_blank",rel:"noopener noreferrer"},k={href:"https://paddleocr.bj.bcebos.com/PP-OCRv4/chinese/ch_PP-OCRv4_rec_server_infer.tar",target:"_blank",rel:"noopener noreferrer"},j=e("h3",{id:"模型转换",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#模型转换"},[e("span",null,"模型转换")])],-1),R=e("p",null,"下载的模型默认格式是 paddle paddle 格式,为了实现较快的推理和速度和在 cpu 上进行推理,需要将 paddle 格式的模型转为 onnx 格式",-1),C=e("h4",{id:"简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#简介"},[e("span",null,"简介")])],-1),J={href:"https://github.com/PaddlePaddle/Paddle2ONNX",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"paddle2onnx",-1),O={href:"https://github.com/RapidAI/PaddleOCRModelConverter",target:"_blank",rel:"noopener noreferrer"},w=e("li",null,[a("主要有两种使用方式： "),e("ul",null,[e("li",null,"方法一：在线转换，借助魔搭和 Hugging Face 两个平台，搭建在线转换 demo；"),e("li",null,"方法二：离线转换，pip 安装该工具，即可本地转换使用。")])],-1),X=e("h4",{id:"在线快速转换",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#在线快速转换"},[e("span",null,"在线快速转换")])],-1),A={href:"https://www.modelscope.cn/studios/liekkas/PaddleOCRModelConverter/summary",target:"_blank",rel:"noopener noreferrer"},T={href:"https://huggingface.co/spaces/SWHL/PaddleOCRModelConverter",target:"_blank",rel:"noopener noreferrer"},F=e("h4",{id:"离线转换",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#离线转换"},[e("span",null,"离线转换")])],-1),H={href:"https://github.com/RapidAI/PaddleOCRModelConverter",target:"_blank",rel:"noopener noreferrer"},M=e("h3",{id:"已有-onnx-模型下载",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#已有-onnx-模型下载"},[e("span",null,"已有 onnx 模型下载")])],-1),N=e("p",null,"已经将部分转换好的 ONNX 模型做了整理，提供了 Hugging Face、Google 网盘和百度网盘两个下载途径。",-1),W={href:"https://huggingface.co/SWHL/RapidOCR/tree/main",target:"_blank",rel:"noopener noreferrer"},q={href:"https://drive.google.com/drive/folders/1x_a9KpCo_1blxH1xFOfgKVkw1HYRVywY?usp=sharing",target:"_blank",rel:"noopener noreferrer"},V={href:"https://pan.baidu.com/s/1CHOXNJLZundoV_8bNpcpWQ?pwd=9h6g",target:"_blank",rel:"noopener noreferrer"},E=e("h2",{id:"服务端口接口",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#服务端口接口"},[e("span",null,"服务端口接口")])],-1),y=e("p",null,"有些时候需要中服务端使用 ocr 识别,笔者退出了一个服务端项目,对外提供了 http 接口,开源地址如下",-1),D={href:"https://github.com/litongjava/ai-server/tree/main/paddle-ocr",target:"_blank",rel:"noopener noreferrer"},S=n(`<h2 id="二次开发" tabindex="-1"><a class="header-anchor" href="#二次开发"><span>二次开发</span></a></h2><h3 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构"><span>代码结构</span></a></h3><p>这是一个典型的 Maven 项目结构，其中：</p><ul><li><code>pom.xml</code>: 这是 Maven 的项目对象模型文件，它包含了项目的依赖、插件和其他配置信息。</li><li><code>src</code>: 这是源代码目录，通常包含主代码 (<code>src/main</code>) 和测试代码 (<code>src/test</code>)。</li></ul><p>从 <code>pom.xml</code> 文件的部分内容中，</p><ol><li>项目的 <code>groupId</code> 是 <code>com.luooqi</code>，而 <code>artifactId</code> 是 <code>tool-ocr</code>。这意味着该项目是由 <code>luooqi</code> 开发的一个名为 <code>tool-ocr</code> 的项目。</li><li>项目的版本信息由一个属性 <code>soft.version</code> 定义，其值为 <code>1.2.6</code>。</li><li>项目有几个依赖项，包括但不限于： <ul><li><code>jnativehook</code>：可能与键盘和鼠标挂钩有关，允许应用程序全局监听键盘和鼠标事件。</li><li><code>hutool-all</code>：Hutool 是一个 Java 工具包，包含了一些常用的 Java 功能模块。</li><li><code>imgscalr-lib</code>：这是一个简单的 Java 图片缩放库。</li></ul></li></ol><p>项目的 <code>src</code> 目录结构如下：</p><ol><li><p><strong>资源文件</strong>:</p><ul><li><code>main/deploy/package/macosx/</code> 和 <code>main/deploy/package/windows/</code>：这些似乎是针对不同操作系统的应用程序图标。</li><li><code>main/resources/</code>：包含了各种资源文件，如 CSS、字体、图片等。</li></ul></li><li><p><strong>Java 文件</strong>:</p><ul><li><code>com.benjaminwan.ocrlibrary</code>：这个包似乎包含与 OCR 处理相关的类。</li><li><code>com.luooqi.ocr</code>：这是应用程序的主要包，其中 <code>MainFm.java</code> 可能是主类。</li><li><code>com.luooqi.ocr.controller</code>：包含应用程序的控制器类。</li><li><code>com.luooqi.ocr.local</code>：可能包含本地 OCR 功能的类。</li><li><code>com.luooqi.ocr.model</code>：包含应用程序的数据模型。</li><li><code>com.luooqi.ocr.snap</code>：似乎与屏幕截图功能有关。</li><li><code>com.luooqi.ocr.utils</code>：包含各种实用程序类。</li></ul></li><li><p><strong>测试文件</strong>:</p><ul><li><code>test/java/com/luooqi/ocr/utils/OcrUtilsTest.java</code>：一个针对 <code>OcrUtils</code> 类的测试。</li></ul></li></ol><h3 id="使用-javafx-maven-plugin-打包应用程序" tabindex="-1"><a class="header-anchor" href="#使用-javafx-maven-plugin-打包应用程序"><span>使用 javafx-maven-plugin 打包应用程序</span></a></h3><h4 id="javafx-maven-plugin-简介" tabindex="-1"><a class="header-anchor" href="#javafx-maven-plugin-简介"><span>javafx-maven-plugin 简介</span></a></h4><p>javafx-maven-plugin 插件。这个插件为 JavaFX 项目提供了便捷的构建和打包工具。</p><h4 id="使用-javafx-maven-plugin-生成-native" tabindex="-1"><a class="header-anchor" href="#使用-javafx-maven-plugin-生成-native"><span>使用 javafx-maven-plugin 生成 native</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>set JAVA_HOME=D:\\dev_program\\java\\jdk1.8.0_121
mvn jfx:native
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-javafx-的-jpackage-工具-打包应用程序" tabindex="-1"><a class="header-anchor" href="#使用-javafx-的-jpackage-工具-打包应用程序"><span>使用 JavaFX 的 jpackage 工具 打包应用程序</span></a></h3><p>关于如何将其打包为 <code>.exe</code>，步骤大致如下：</p><ol><li>使用 Maven 构建项目并生成 JAR 文件(java 8)。</li><li>使用 JavaFX 的 jpackage 工具打包 JAR 文件为 EXE 文件 (java 14)。</li></ol><p><code>jpackage</code> 是 Java 14 及更高版本中提供的一个实验工具，用于为 Java 应用程序创建本地包。以下是如何使用 <code>jpackage</code> 为 JavaFX 应用程序创建一个 Windows <code>.exe</code> 文件的基本步骤：</p><h4 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作"><span>准备工作</span></a></h4><ul><li>安装 Java 8 和 Java 14</li><li>确保您的 JDK 版本是 14 或更高版本，并且已经包含 <code>jpackage</code>。</li><li>安装.NET SDK 6,下载地址https://dotnet.microsoft.com/en-us/download/dotnet/thank-you/sdk-6.0.317-windows-x64-installer</li><li>从 https://github.com/wixtoolset/wix3/releases 下载 WiX 3.0 或更高版本，然后将其添加到 PATH。</li></ul><h4 id="安装-wix3" tabindex="-1"><a class="header-anchor" href="#安装-wix3"><span>安装 wix3</span></a></h4><p>WiX Toolset 进行了一些变化，并且它们开始提供一个 .NET Core 工具，这可能是您使用的安装方法。但对于 <code>jpackage</code>，您需要的是传统的 WiX Toolset，它包含 <code>light.exe</code> 和 <code>candle.exe</code>。</p><p>请按照以下步骤操作：</p>`,22),z=e("p",null,[e("strong",null,"访问 WiX Toolset 的 Releases 页面"),a(":")],-1),I={href:"https://github.com/wixtoolset/wix3/releases",target:"_blank",rel:"noopener noreferrer"},L=n("<li><p><strong>下载并安装 WiX Toolset</strong>:</p><ul><li>在 Releases 页面，找到最新的稳定版本。</li><li>下载 <code>.exe</code> 安装程序或 <code>.zip</code> 归档文件。</li><li>如果下载了 <code>.exe</code> 安装程序，直接运行它以安装。如果下载了 <code>.zip</code> 归档文件，解压它到一个适当的目录。</li></ul></li><li><p><strong>将 WiX Toolset 添加到 PATH</strong>:</p><ul><li>找到 WiX Toolset 的安装目录或您解压 <code>.zip</code> 文件的目录。确保这个目录下有 <code>bin</code> 子目录，并且其中包含 <code>light.exe</code> 和 <code>candle.exe</code>。</li><li>将这个 <code>bin</code> 子目录添加到您的系统 <code>PATH</code>。</li></ul></li><li><p><strong>重新运行 jpackage 命令</strong>。</p></li>",3),K=n(`<p>完成这些步骤后，您应该能够使用 <code>jpackage</code> 正确地打包您的应用程序为 <code>.exe</code> 文件。</p><h4 id="创建-javafx-jar" tabindex="-1"><a class="header-anchor" href="#创建-javafx-jar"><span>创建 JavaFX JAR</span></a></h4><p>首先，您需要使用 Maven 构建项目并生成一个可执行的 JAR 文件。在项目根目录中执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>D:<span class="token punctuation">\\</span>dev_program<span class="token punctuation">\\</span>java<span class="token punctuation">\\</span>jdk1.8.0_121
mvn clean package <span class="token parameter variable">-DskipTests</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>确保 JAR 文件包含所有必要的依赖项并且可以独立运行。</p><h4 id="使用-jpackage-创建-exe-文件" tabindex="-1"><a class="header-anchor" href="#使用-jpackage-创建-exe-文件"><span>使用 jpackage 创建 <code>.exe</code> 文件</span></a></h4><p>以下是一个基本的 <code>jpackage</code> 命令示例，用于将 JavaFX JAR 打包为 <code>.exe</code> 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>jpackage <span class="token parameter variable">--type</span> exe <span class="token parameter variable">--input</span> target/ --main-jar tool-ocr-1.2.6.jar <span class="token parameter variable">--name</span> tree-hole-ocr --main-class com.luooqi.ocr.OcrApp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>--type exe</code>：指定输出类型为 <code>.exe</code>。</li><li><code>--input target/</code>：指定包含 JAR 文件的目录。</li><li><code>--main-jar</code>：指定要打包的主 JAR 文件。</li><li><code>--name</code>：输出的应用程序名称。</li><li><code>--main-class</code>：指定应用程序的主类。</li><li><code>--win-shortcut</code>：为应用程序创建一个 Windows 快捷方式。</li></ul><p>这只是一个基础示例。<code>jpackage</code> 提供了许多其他选项，例如设置应用程序图标、JVM 参数等。您可以查看 <code>jpackage</code> 的官方文档或使用 <code>jpackage --help</code> 命令查看所有可用选项。</p><p>完成上述步骤后，您应该会在当前目录中得到一个 <code>.exe</code> 文件和一个相应的安装程序。</p><p>注意：这个过程可能需要 JavaFX jmods 文件，您可能需要从 JavaFX 官方网站下载它们，并使用 <code>--module-path</code> 和 <code>--add-modules</code> 选项指定它们。</p><p>最后，如果你想要我为你生成这个 <code>.exe</code> 文件，请告诉我，我会为你完成这个步骤。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>`,15),B={href:"https://rapidai.github.io/RapidOCRDocs/docs/about_model/convert_model/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://rapidai.github.io/RapidOCRDocs/docs/about_model/download_onnx/",target:"_blank",rel:"noopener noreferrer"};function U(Y,Q){const o=c("ExternalLinkIcon");return i(),s("div",null,[r,p,e("p",null,[e("a",h,[a("下载地址"),l(o)])]),u,_,g,v,m,e("ul",null,[e("li",null,[e("a",x,[a("下载地址"),l(o)])])]),f,e("ul",null,[e("li",null,[e("a",b,[a("ch_PP-OCRv4_server_det 推理模型"),l(o)])]),e("li",null,[e("a",k,[a("ch_PP-OCRv4_server_rec 推理模型"),l(o)])])]),j,R,C,e("ul",null,[e("li",null,[a("Paddle 格式模型的转换，主要借助"),e("a",J,[P,l(o)]),a("库实现。针对 PaddleOCR 中涉及到的相关模型，直接转换并不太方便。因此，推出了"),e("a",O,[a("PaddleOCRModelConverter"),l(o)]),a("转换工具。")]),w]),X,e("ul",null,[e("li",null,[e("a",A,[a("魔搭"),l(o)])]),e("li",null,[e("a",T,[a("Hugging Face"),l(o)])])]),F,e("p",null,[e("a",H,[a("PaddleOCRModelConverter"),l(o)])]),M,N,e("ul",null,[e("li",null,[e("a",W,[a("Hugging Face Models"),l(o)])]),e("li",null,[e("a",q,[a("Google 网盘"),l(o)])]),e("li",null,[e("a",V,[a("百度网盘"),l(o)])])]),E,y,e("ul",null,[e("li",null,[e("a",D,[a("paddle-ocr"),l(o)])])]),S,e("ol",null,[e("li",null,[z,e("ul",null,[e("li",null,[e("a",I,[a("WiX Toolset Releases"),l(o)])])])]),L]),K,e("ul",null,[e("li",null,[e("a",B,[a("convert_model"),l(o)])]),e("li",null,[e("a",G,[a("download_onnx"),l(o)])])])])}const $=d(t,[["render",U],["__file","1.1.html.vue"]]),ee=JSON.parse('{"path":"/zh/01/1.1.html","title":"快速入门","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"添加服务模型","slug":"添加服务模型","link":"#添加服务模型","children":[{"level":3,"title":"下载 paddle ocr 服务端模型","slug":"下载-paddle-ocr-服务端模型","link":"#下载-paddle-ocr-服务端模型","children":[]},{"level":3,"title":"模型转换","slug":"模型转换","link":"#模型转换","children":[]},{"level":3,"title":"已有 onnx 模型下载","slug":"已有-onnx-模型下载","link":"#已有-onnx-模型下载","children":[]}]},{"level":2,"title":"服务端口接口","slug":"服务端口接口","link":"#服务端口接口","children":[]},{"level":2,"title":"二次开发","slug":"二次开发","link":"#二次开发","children":[{"level":3,"title":"代码结构","slug":"代码结构","link":"#代码结构","children":[]},{"level":3,"title":"使用 javafx-maven-plugin 打包应用程序","slug":"使用-javafx-maven-plugin-打包应用程序","link":"#使用-javafx-maven-plugin-打包应用程序","children":[]},{"level":3,"title":"使用 JavaFX 的 jpackage 工具 打包应用程序","slug":"使用-javafx-的-jpackage-工具-打包应用程序","link":"#使用-javafx-的-jpackage-工具-打包应用程序","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"updatedTime":1714307616000,"contributors":[{"name":"litongjava","email":"litongjava@qq.com","commits":2}]},"filePathRelative":"zh/01/1.1.md"}');export{$ as comp,ee as data};
